/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddBlueskyInstanceRequest
 */
export interface AddBlueskyInstanceRequest {
    /**
     * 
     * @type {string}
     * @memberof AddBlueskyInstanceRequest
     */
    'instanceUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddBlueskyInstanceRequest
     */
    'handle'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddBlueskyInstanceRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AddMastodonInstanceRequest
 */
export interface AddMastodonInstanceRequest {
    /**
     * 
     * @type {string}
     * @memberof AddMastodonInstanceRequest
     */
    'instanceUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddMastodonInstanceRequest
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface BlueskyService
 */
export interface BlueskyService {
    /**
     * 
     * @type {string}
     * @memberof BlueskyService
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlueskyService
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlueskyService
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlueskyService
     */
    'handle'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlueskyService
     */
    'appPassword'?: string;
}
/**
 * 
 * @export
 * @interface MastodonService
 */
export interface MastodonService {
    /**
     * 
     * @type {string}
     * @memberof MastodonService
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MastodonService
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MastodonService
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MastodonService
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'serviceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'poster'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'postedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'link'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Message
     */
    'thumbnailUrls'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Message
     */
    'imageUrls'?: Array<string>;
}

/**
 * BlueskyControllerApi - axios parameter creator
 * @export
 */
export const BlueskyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddBlueskyInstanceRequest} addBlueskyInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstance1: async (addBlueskyInstanceRequest: AddBlueskyInstanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addBlueskyInstanceRequest' is not null or undefined
            assertParamExists('addInstance1', 'addBlueskyInstanceRequest', addBlueskyInstanceRequest)
            const localVarPath = `/bluesky/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addBlueskyInstanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstance1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstance1', 'id', id)
            const localVarPath = `/bluesky/instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeTimeline1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bluesky/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bluesky/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlueskyControllerApi - functional programming interface
 * @export
 */
export const BlueskyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlueskyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddBlueskyInstanceRequest} addBlueskyInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInstance1(addBlueskyInstanceRequest: AddBlueskyInstanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInstance1(addBlueskyInstanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlueskyControllerApi.addInstance1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInstance1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstance1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlueskyControllerApi.deleteInstance1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeTimeline1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeTimeline1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlueskyControllerApi.getHomeTimeline1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlueskyService>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlueskyControllerApi.getInstances1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlueskyControllerApi - factory interface
 * @export
 */
export const BlueskyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlueskyControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BlueskyControllerApiAddInstance1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstance1(requestParameters: BlueskyControllerApiAddInstance1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addInstance1(requestParameters.addBlueskyInstanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlueskyControllerApiDeleteInstance1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstance1(requestParameters: BlueskyControllerApiDeleteInstance1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInstance1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeTimeline1(options?: RawAxiosRequestConfig): AxiosPromise<Array<Message>> {
            return localVarFp.getHomeTimeline1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances1(options?: RawAxiosRequestConfig): AxiosPromise<Array<BlueskyService>> {
            return localVarFp.getInstances1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addInstance1 operation in BlueskyControllerApi.
 * @export
 * @interface BlueskyControllerApiAddInstance1Request
 */
export interface BlueskyControllerApiAddInstance1Request {
    /**
     * 
     * @type {AddBlueskyInstanceRequest}
     * @memberof BlueskyControllerApiAddInstance1
     */
    readonly addBlueskyInstanceRequest: AddBlueskyInstanceRequest
}

/**
 * Request parameters for deleteInstance1 operation in BlueskyControllerApi.
 * @export
 * @interface BlueskyControllerApiDeleteInstance1Request
 */
export interface BlueskyControllerApiDeleteInstance1Request {
    /**
     * 
     * @type {string}
     * @memberof BlueskyControllerApiDeleteInstance1
     */
    readonly id: string
}

/**
 * BlueskyControllerApi - object-oriented interface
 * @export
 * @class BlueskyControllerApi
 * @extends {BaseAPI}
 */
export class BlueskyControllerApi extends BaseAPI {
    /**
     * 
     * @param {BlueskyControllerApiAddInstance1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueskyControllerApi
     */
    public addInstance1(requestParameters: BlueskyControllerApiAddInstance1Request, options?: RawAxiosRequestConfig) {
        return BlueskyControllerApiFp(this.configuration).addInstance1(requestParameters.addBlueskyInstanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlueskyControllerApiDeleteInstance1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueskyControllerApi
     */
    public deleteInstance1(requestParameters: BlueskyControllerApiDeleteInstance1Request, options?: RawAxiosRequestConfig) {
        return BlueskyControllerApiFp(this.configuration).deleteInstance1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueskyControllerApi
     */
    public getHomeTimeline1(options?: RawAxiosRequestConfig) {
        return BlueskyControllerApiFp(this.configuration).getHomeTimeline1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlueskyControllerApi
     */
    public getInstances1(options?: RawAxiosRequestConfig) {
        return BlueskyControllerApiFp(this.configuration).getInstances1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MastodonControllerApi - axios parameter creator
 * @export
 */
export const MastodonControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddMastodonInstanceRequest} addMastodonInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstance: async (addMastodonInstanceRequest: AddMastodonInstanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addMastodonInstanceRequest' is not null or undefined
            assertParamExists('addInstance', 'addMastodonInstanceRequest', addMastodonInstanceRequest)
            const localVarPath = `/mastodon/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addMastodonInstanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstance', 'id', id)
            const localVarPath = `/mastodon/instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeTimeline: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mastodon/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mastodon/instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTimeline: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mastodon/pub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MastodonControllerApi - functional programming interface
 * @export
 */
export const MastodonControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MastodonControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddMastodonInstanceRequest} addMastodonInstanceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInstance(addMastodonInstanceRequest: AddMastodonInstanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInstance(addMastodonInstanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MastodonControllerApi.addInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInstance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MastodonControllerApi.deleteInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeTimeline(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeTimeline(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MastodonControllerApi.getHomeTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MastodonService>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MastodonControllerApi.getInstances']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicTimeline(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicTimeline(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MastodonControllerApi.getPublicTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MastodonControllerApi - factory interface
 * @export
 */
export const MastodonControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MastodonControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {MastodonControllerApiAddInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstance(requestParameters: MastodonControllerApiAddInstanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addInstance(requestParameters.addMastodonInstanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MastodonControllerApiDeleteInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstance(requestParameters: MastodonControllerApiDeleteInstanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInstance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeTimeline(options?: RawAxiosRequestConfig): AxiosPromise<Array<Message>> {
            return localVarFp.getHomeTimeline(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(options?: RawAxiosRequestConfig): AxiosPromise<Array<MastodonService>> {
            return localVarFp.getInstances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicTimeline(options?: RawAxiosRequestConfig): AxiosPromise<Array<Message>> {
            return localVarFp.getPublicTimeline(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addInstance operation in MastodonControllerApi.
 * @export
 * @interface MastodonControllerApiAddInstanceRequest
 */
export interface MastodonControllerApiAddInstanceRequest {
    /**
     * 
     * @type {AddMastodonInstanceRequest}
     * @memberof MastodonControllerApiAddInstance
     */
    readonly addMastodonInstanceRequest: AddMastodonInstanceRequest
}

/**
 * Request parameters for deleteInstance operation in MastodonControllerApi.
 * @export
 * @interface MastodonControllerApiDeleteInstanceRequest
 */
export interface MastodonControllerApiDeleteInstanceRequest {
    /**
     * 
     * @type {string}
     * @memberof MastodonControllerApiDeleteInstance
     */
    readonly id: string
}

/**
 * MastodonControllerApi - object-oriented interface
 * @export
 * @class MastodonControllerApi
 * @extends {BaseAPI}
 */
export class MastodonControllerApi extends BaseAPI {
    /**
     * 
     * @param {MastodonControllerApiAddInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastodonControllerApi
     */
    public addInstance(requestParameters: MastodonControllerApiAddInstanceRequest, options?: RawAxiosRequestConfig) {
        return MastodonControllerApiFp(this.configuration).addInstance(requestParameters.addMastodonInstanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MastodonControllerApiDeleteInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastodonControllerApi
     */
    public deleteInstance(requestParameters: MastodonControllerApiDeleteInstanceRequest, options?: RawAxiosRequestConfig) {
        return MastodonControllerApiFp(this.configuration).deleteInstance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastodonControllerApi
     */
    public getHomeTimeline(options?: RawAxiosRequestConfig) {
        return MastodonControllerApiFp(this.configuration).getHomeTimeline(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastodonControllerApi
     */
    public getInstances(options?: RawAxiosRequestConfig) {
        return MastodonControllerApiFp(this.configuration).getInstances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastodonControllerApi
     */
    public getPublicTimeline(options?: RawAxiosRequestConfig) {
        return MastodonControllerApiFp(this.configuration).getPublicTimeline(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SigninControllerApi - axios parameter creator
 * @export
 */
export const SigninControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/signin/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/signin/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SigninControllerApi - functional programming interface
 * @export
 */
export const SigninControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SigninControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exists(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exists(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SigninControllerApi.exists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SigninControllerApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SigninControllerApi - factory interface
 * @export
 */
export const SigninControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SigninControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.exists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.register(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SigninControllerApi - object-oriented interface
 * @export
 * @class SigninControllerApi
 * @extends {BaseAPI}
 */
export class SigninControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninControllerApi
     */
    public exists(options?: RawAxiosRequestConfig) {
        return SigninControllerApiFp(this.configuration).exists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigninControllerApi
     */
    public register(options?: RawAxiosRequestConfig) {
        return SigninControllerApiFp(this.configuration).register(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WelcomeControllerApi - axios parameter creator
 * @export
 */
export const WelcomeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WelcomeControllerApi - functional programming interface
 * @export
 */
export const WelcomeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WelcomeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async welcome(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.welcome(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WelcomeControllerApi.welcome']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async welcome1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.welcome1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WelcomeControllerApi.welcome1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WelcomeControllerApi - factory interface
 * @export
 */
export const WelcomeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WelcomeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.welcome(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome1(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.welcome1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WelcomeControllerApi - object-oriented interface
 * @export
 * @class WelcomeControllerApi
 * @extends {BaseAPI}
 */
export class WelcomeControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WelcomeControllerApi
     */
    public welcome(options?: RawAxiosRequestConfig) {
        return WelcomeControllerApiFp(this.configuration).welcome(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WelcomeControllerApi
     */
    public welcome1(options?: RawAxiosRequestConfig) {
        return WelcomeControllerApiFp(this.configuration).welcome1(options).then((request) => request(this.axios, this.basePath));
    }
}



